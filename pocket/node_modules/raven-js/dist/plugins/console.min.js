/*! Raven.js 3.18.1 (2dca364) | github.com/getsentry/raven-js */
!(function(a) {
  if ('object' == typeof exports && 'undefined' != typeof module) module.exports = a();
  else if ('function' == typeof define && define.amd) define([], a);
  else {
    var b;
    (b =
      'undefined' != typeof window
        ? window
        : 'undefined' != typeof global
          ? global
          : 'undefined' != typeof self ? self : this),
      (b = b.Raven || (b.Raven = {})),
      (b = b.Plugins || (b.Plugins = {})),
      (b.Console = a());
  }
})(function() {
  return (function a(b, c, d) {
    function e(g, h) {
      if (!c[g]) {
        if (!b[g]) {
          var i = 'function' == typeof require && require;
          if (!h && i) return i(g, !0);
          if (f) return f(g, !0);
          var j = new Error("Cannot find module '" + g + "'");
          throw ((j.code = 'MODULE_NOT_FOUND'), j);
        }
        var k = (c[g] = {exports: {}});
        b[g][0].call(
          k.exports,
          function(a) {
            var c = b[g][1][a];
            return e(c ? c : a);
          },
          k,
          k.exports,
          a,
          b,
          c,
          d
        );
      }
      return c[g].exports;
    }
    for (var f = 'function' == typeof require && require, g = 0; g < d.length; g++)
      e(d[g]);
    return e;
  })(
    {
      1: [
        function(a, b, c) {
          function d(a, b, c) {
            (b = b || window.console || {}), (c = c || {});
            var d = c.levels || ['debug', 'info', 'warn', 'error'];
            'assert' in b && d.push('assert');
            for (
              var f = function(b, c) {
                  a.captureMessage(b, c);
                },
                g = d.pop();
              g;

            )
              e(b, g, f), (g = d.pop());
          }
          var e = a(2).wrapMethod;
          b.exports = d;
        },
        {2: 2}
      ],
      2: [
        function(a, b, c) {
          var d = function(a, b, c) {
            var d = a[b],
              e = a;
            if (b in a) {
              var f = 'warn' === b ? 'warning' : b;
              a[b] = function() {
                var a = [].slice.call(arguments),
                  g = '' + a.join(' '),
                  h = {level: f, logger: 'console', extra: {arguments: a}};
                'assert' === b
                  ? a[0] === !1 &&
                    ((g =
                      'Assertion failed: ' + (a.slice(1).join(' ') || 'console.assert')),
                    (h.extra.arguments = a.slice(1)),
                    c && c(g, h))
                  : c && c(g, h),
                  d && Function.prototype.apply.call(d, e, a);
              };
            }
          };
          b.exports = {wrapMethod: d};
        },
        {}
      ]
    },
    {},
    [1]
  )(1);
});
//# sourceMappingURL=console.min.js.map
