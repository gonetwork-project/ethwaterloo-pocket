{"version":3,"sources":["project/Doctor.js"],"names":["async","projectRoot","await","Binaries","sourceBashLoginScriptsAsync","let","npmVersionResponse","spawnAsync","npmVersion","_","trim","stdout","semver","lt","MIN_NPM_VERSION","_isNpmVersionWithinRanges","BAD_NPM_VERSION_RANGES","ProjectUtils","logError","CORRECT_NPM_VERSION","WARNING","WARN_NPM_VERSION_RANGES","logWarning","clearNotification","e","NO_ISSUES","_checkNpmVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","MIN_WATCHMAN_VERSION","warningMessage","process","platform","_checkWatchmanVersionAsync","schemaPath","exp","pkg","readConfigJsonAsync","schema","JSON","parse","fs","readFile","promise","validateWithSchema","validateWithSchemaFileAsync","configName","sdkVersion","validateAssets","schemaErrorMessage","assetsErrorMessage","validator","rootDir","validateSchemaAsync","errors","length","map","formatValidationError","join","validateAssetsAsync","Config","helpUrl","validation","reactNativeVersionWarnings","reactNative","dependencies","match","sdkVersions","Api","sdkVersionsAsync","reactNativeTag","sdkVersionObject","major","Versions","parseSdkVersionFromTag","_validatePackageJsonAsync","allowNetwork","FATAL","message","expJsonExists","fileExistsAsync","path","appJsonExists","configFilenameAsync","env","ExpSchema","getSchemaAsync","keys","reactNativeIssue","_validateReactNativeVersionAsync","_validateExpJsonAsync","nodeModulesPath","result","statSync","isDirectory","isFile","npmls","npmlsCommand","cwd","npmlsDependencies","errorStrings","forEach","versionRequired","dependency","installedDependency","version","push","peerMissing","satisfies","includes","from","_validateNodeModulesAsync","validateAsync","validateLowLatencyAsync","validateWithNetworkAsync","status","expStatus","packageStatus","Math","max","ignoreNodeModulesValidation","nodeModulesStatus","sdkPkg","EXPO_SDK_NOT_INSTALLED","mainFilePath","main","mainFile","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","ranges","some","range","validationError"],"mappings":"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","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs';\nimport jsonschema from 'jsonschema';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsync from '@expo/spawn-async';\nimport readChunk from 'read-chunk';\nimport fileType from 'file-type';\n\nimport Schemer, { SchemerError } from '@expo/schemer';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport Api from '../Api';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const FATAL = 2;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = '4.6.1';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nfunction _isNpmVersionWithinRanges(npmVersion, ranges) {\n  return _.some(ranges, range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot) {\n  try {\n    await Binaries.sourceBashLoginScriptsAsync();\n    let npmVersionResponse = await spawnAsync('npm', ['--version']);\n    let npmVersion = _.trim(npmVersionResponse.stdout);\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      warningMessage,\n      'doctor-watchman-version'\n    );\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchemaFileAsync(\n  projectRoot: string,\n  schemaPath: string\n): Promise<{ errorMessage?: string }> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let schema = JSON.parse(await fs.readFile.promise(schemaPath, 'utf8'));\n  return validateWithSchema(\n    projectRoot,\n    exp,\n    schema.schema,\n    'exp.json',\n    'UNVERSIONED',\n    true\n  );\n}\n\nexport async function validateWithSchema(\n  projectRoot: string,\n  exp: any,\n  schema: any,\n  configName: string,\n  sdkVersion: string,\n  validateAssets: boolean\n): { errorMessage?: string } {\n  let schemaErrorMessage;\n  let assetsErrorMessage;\n  let validator = new Schemer(schema, { rootDir: projectRoot });\n\n  // Validate the schema itself\n  try {\n    await validator.validateSchemaAsync(exp);\n  } catch (e) {\n    if (e instanceof SchemerError) {\n      schemaErrorMessage = `Warning: Problem${e.errors.length > 1\n        ? 's'\n        : ''} validating fields in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/guides/configuration.html.`;\n      schemaErrorMessage += e.errors.map(formatValidationError).join('');\n    }\n  }\n\n  if (validateAssets) {\n    try {\n      await validator.validateAssetsAsync(exp);\n    } catch (e) {\n      if (e instanceof SchemerError) {\n        assetsErrorMessage = `Warning: Problem${e.errors.length > 1\n          ? ''\n          : 's'} validating asset fields in ${configName}. See ${Config.helpUrl}`;\n        assetsErrorMessage += e.errors.map(formatValidationError).join('');\n      }\n    }\n  }\n  return { schemaErrorMessage, assetsErrorMessage };\n}\n\nfunction formatValidationError(validationError) {\n  return `\\n • ${validationError.message}.`;\n}\n\nasync function _validatePackageJsonAsync(\n  exp,\n  pkg,\n  projectRoot\n): Promise<number> {\n  // TODO: Check any native module versions here\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    // Expo fork of react-native is required\n    // TODO(2016-12-20): Remove the check for our old \"exponentjs\" org eventually\n    if (!reactNative.match(/(exponent(?:js)?|expo)\\/react-native/)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    let sdkVersions = await Api.sdkVersionsAsync();\n    let sdkVersion = exp.sdkVersion;\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(\n          Versions.parseSdkVersionFromTag(\n            sdkVersionObject['expoReactNativeTag']\n          )\n        )\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject[\n            'expoReactNativeTag'\n          ]}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-invalid-version-of-react-native'\n      );\n\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-malformed-version-of-react-native'\n      );\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n  return NO_ISSUES;\n}\n\nasync function _validateExpJsonAsync(\n  exp,\n  pkg,\n  projectRoot,\n  allowNetwork\n): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-problem-checking-watchman-version'\n  );\n\n  const expJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'exp.json')\n  );\n  const appJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'app.json')\n  );\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n\n  // Skip validation if the correct token is set in env\n  if (\n    !(\n      sdkVersion === 'UNVERSIONED' &&\n      process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']\n    )\n  ) {\n    try {\n      // TODO(perry) figure out a way to tell the schema validator whether this is exp.json or app.json\n      let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n      let { schemaErrorMessage, assetsErrorMessage } = await validateWithSchema(\n        projectRoot,\n        exp,\n        schema,\n        configName,\n        sdkVersion,\n        allowNetwork\n      );\n\n      if (schemaErrorMessage) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          schemaErrorMessage,\n          'doctor-schema-validation'\n        );\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n      }\n      if (assetsErrorMessage) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          assetsErrorMessage,\n          `doctor-validate-asset-fields`\n        );\n      } else {\n        ProjectUtils.clearNotification(\n          projectRoot,\n          `doctor-validate-asset-fields`\n        );\n      }\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-schema-validation-exception'\n      );\n      if (schemaErrorMessage || assetsErrorMessage) return WARNING;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Problem validating ${configName}: ${e.message}.`,\n        'doctor-schema-validation-exception'\n      );\n    }\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED') {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  // react-native is required\n  if (!pkg.dependencies || !pkg.dependencies['react-native']) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Can't find react-native in package.json dependencies`,\n      'doctor-no-react-native-in-package-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-no-react-native-in-package-json'\n  );\n\n  // TODO(adam) set up caching for this\n  let sdkVersions = await Api.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-versions-endpoint-failed'\n  );\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Invalid sdkVersion. Valid options are ${_.keys(\n        sdkVersions\n      ).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  const reactNativeIssue = await _validateReactNativeVersionAsync(\n    exp,\n    pkg,\n    projectRoot,\n    sdkVersions,\n    sdkVersion\n  );\n\n  if (reactNativeIssue !== NO_ISSUES) {\n    return reactNativeIssue;\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp,\n  pkg,\n  projectRoot,\n  sdkVersions,\n  sdkVersion\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    // TODO(2016-12-20): Remove the check for our old \"exponentjs\" org eventually\n    if (!reactNative.match(/(exponent(?:js)?|expo)\\/react-native/)) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n      //\n      // ProjectUtils.logWarning(\n      //   projectRoot,\n      //   'expo',\n      //   `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n      //   'doctor-not-using-expo-fork'\n      // );\n      // return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(\n          Versions.parseSdkVersionFromTag(\n            sdkVersionObject['expoReactNativeTag']\n          )\n        )\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject[\n            'expoReactNativeTag'\n          ]}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-invalid-version-of-react-native'\n      );\n\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-malformed-version-of-react-native'\n      );\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  return NO_ISSUES;\n}\n\n// TODO: use `yarn check`\nasync function _validateNodeModulesAsync(projectRoot): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.join(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    let result = fs.statSync(\n      path.join(\n        nodeModulesPath,\n        'node_modules',\n        'react-native',\n        'local-cli',\n        'cli.js'\n      )\n    );\n    if (!result.isFile()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-react-native-not-installed'\n    );\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n      'doctor-react-native-not-installed'\n    );\n    return FATAL;\n  }\n\n  // Validate all package.json dependencies are installed and up to date\n  if (pkg.dependencies) {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      await spawnAsync('npm', ['--version']);\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `\\`npm\\` command not found. If you have npm installed please run \\`npm install -g exp && exp path\\`.`,\n        'doctor-npm-not-found'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-npm-not-found');\n\n    let npmls;\n    try {\n      let npmlsCommand = await spawnAsync(\n        'npm',\n        ['ls', '--json', '--depth', '1'],\n        {\n          cwd: nodeModulesPath,\n        }\n      );\n      npmls = npmlsCommand.stdout;\n    } catch (e) {\n      npmls = e.stdout; // `npm ls` sometimes returns an error code\n    }\n\n    if (!npmls) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies. Could not run \\`npm ls\\` in ${projectRoot}.`,\n        'doctor-could-not-run-npm-ls'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-could-not-run-npm-ls');\n\n    let npmlsDependencies;\n    try {\n      npmlsDependencies = JSON.parse(npmls).dependencies;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies: ${e.message}`,\n        'doctor-problem-checking-node-modules'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-problem-checking-node-modules'\n    );\n\n    if (npmlsDependencies) {\n      let errorStrings = [];\n      _.forEach(pkg.dependencies, (versionRequired, dependency) => {\n        let installedDependency = npmlsDependencies[dependency];\n        if (\n          dependency === 'react' &&\n          versionRequired.match(/-(alpha|beta|rc)/)\n        ) {\n          // ignore prerelease dependencies on react\n        } else if (\n          dependency === 'expo' &&\n          exp.sdkVersion !== 'UNVERSIONED' &&\n          semver.major(installedDependency.version) !==\n            semver.major(exp.sdkVersion)\n        ) {\n          // Warn user if versions are not aligned\n          errorStrings.push(\n            'Warning: Expo version in package.json does not match sdkVersion in manifest.'\n          );\n        } else if (!installedDependency || !installedDependency.version) {\n          if (installedDependency && installedDependency.peerMissing) {\n            errorStrings.push(\n              `Warning: '${dependency}' peer depencency missing. Run \\`npm ls\\` in ${nodeModulesPath} to see full warning.`\n            );\n          } else {\n            errorStrings.push(\n              `Warning: '${dependency}' dependency is not installed.`\n            );\n          }\n        } else if (\n          dependency !== 'react-native' &&\n          !semver.satisfies(installedDependency.version, versionRequired) &&\n          !versionRequired.includes(installedDependency.from)\n        ) {\n          // TODO: also check react-native\n          // For react native, `from` field looks like \"expo/react-native#sdk-8.0.1\" and\n          // versionRequired looks like \"github:expo/react-native#sdk-8.0.0\"\n          errorStrings.push(\n            `Warning: Installed version ${installedDependency.version} of '${dependency}' does not satisfy required version ${versionRequired}`\n          );\n        }\n      });\n\n      if (errorStrings.length > 0) {\n        errorStrings.push(\n          `\\nIf there is an issue running your project, please run \\`npm install\\` in ${nodeModulesPath} and restart.`\n        );\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          errorStrings.join('\\n'),\n          'doctor-node-modules-issues'\n        );\n        return WARNING;\n      } else {\n        ProjectUtils.clearNotification(\n          projectRoot,\n          'doctor-node-modules-issues'\n        );\n      }\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nasync function validateAsync(\n  projectRoot: string,\n  allowNetwork: boolean\n): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  const expStatus = await _validateExpJsonAsync(\n    exp,\n    pkg,\n    projectRoot,\n    allowNetwork\n  );\n  if (expStatus === FATAL) {\n    return expStatus;\n  }\n\n  const packageStatus = await _validatePackageJsonAsync(exp, pkg, projectRoot);\n\n  status = Math.max(status, expStatus, packageStatus);\n  if (status === FATAL) return status;\n\n  // TODO: this broke once we started using yarn because `npm ls` doesn't\n  // work on a yarn install. Use `yarn check` in the future.\n  if (status !== FATAL && exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<number> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile.promise(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (\n      mainFile.includes(`from '${sdkPkg}'`) ||\n      mainFile.includes(`require('${sdkPkg}')`)\n    ) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/xdl/src"}