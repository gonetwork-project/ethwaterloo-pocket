{"version":3,"sources":["Exp.js"],"names":["async","root","let","exp","pkg","await","ProjectUtils","readConfigJsonAsync","entryPoint","main","determineEntryPointAsync","templateId","progressFunction","retryFunction","versions","Api","versionsAsync","templateApp","i","templatesv2","length","id","ErrorCode","INVALID_OPTIONS","starterAppVersion","version","starterAppName","filename","starterAppPath","path","join","_starterAppCacheDirectory","existsAsync","url","downloadAsync","_downloadStarterAppAsync","selectedDir","opts","schema","joi","object","keys","name","string","required","promise","validate","e","toString","Analytics","logEvent","fileExists","fs","statSync","readdirSync","DIRECTORY_ALREADY_EXISTS","mkdirp","Logger","notifications","info","code","NotificationCode","PROGRESS","MessageCode","DOWNLOADING","downloadTemplateApp","EXTRACTING","Extract","extractAsync","CUSTOMIZING","author","UserSettings","getAsync","packageJsonFile","packageJson","readAsync","data","Object","assign","description","writeAsync","appJson","readFile","customAppJson","replace","writeFile","initGitRepo","extractTemplateApp","process","platform","Binaries","isXcodeInstalled","global","warn","insideGit","spawnAsync","cwd","debug","resolve","recentExpsJsonFile","recentExps","filter","x","unshift","slice","saveRecentExpRootAsync","icon","iconUrl","pathOrUrl","resolvedPath","existsSync","readableRoot","makePathReadable","expInfoSafeAsync","user","UserManager","ensureLoggedInAsync","Error","username","slug","configName","configFilenameAsync","sdkVersion","remotePackageName","remoteUsername","remoteFullPackageName","bundleIdentifierIOS","ios","bundleIdentifier","packageNameAndroid","android","package","args","getPublishInfoAsync","results","Promise","all","map","filteredResults","result","recentValidExpsAsync","recipient","url_","callMethodAsync","sendAsync","projectRoot","ps","ProjectSettings","randomness","urlRandomness","resetProjectRandomnessAsync","getProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","dotExpoHomeDirectory","rimraf","sync","clearXDLCacheAsync","default","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","_getPlatformSpecificEntryPoint","endsWith","substring","dir","getHomeDir","env","pth","homedir","substr"],"mappings":"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","file":"../Exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport existsAsync from 'exists-async';\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport JsonFile from '@expo/json-file';\nimport joi from 'joi';\nimport rimraf from 'rimraf';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport ErrorCode from './ErrorCode';\nimport * as Extract from './Extract';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport UserManager from './User';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\nimport * as ProjectSettings from './ProjectSettings';\nimport MessageCode from './MessageCode';\n\n// FIXME(perry) eliminate usage of this template\nexport const ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';\n\nexport { default as convertProjectAsync } from './project/Convert';\n\nfunction _getPlatformSpecificEntryPoint(entryPoint, platform) {\n  if (entryPoint.endsWith('.js')) {\n    return `${entryPoint.substring(0, entryPoint.length - 3)}.${platform}.js`;\n  } else {\n    return `${entryPoint}.${platform}.js`;\n  }\n}\n\nexport async function determineEntryPointAsync(root: string) {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(root);\n\n  // entryPoint is relative to the packager root and main is relative\n  // to the project root. So if your rn-cli.config.js points to a different\n  // root than the project root, these can be different. Most of the time\n  // you should use main.\n  let entryPoint = pkg.main || 'index.js';\n  if (exp && exp.entryPoint) {\n    entryPoint = exp.entryPoint;\n  }\n\n  return entryPoint;\n}\n\nfunction _starterAppCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'starter-app-cache');\n  mkdirp.sync(dir);\n  return dir;\n}\n\nasync function _downloadStarterAppAsync(\n  templateId,\n  progressFunction,\n  retryFunction\n) {\n  let versions = await Api.versionsAsync();\n  let templateApp = null;\n  for (let i = 0; i < versions.templatesv2.length; i++) {\n    if (templateId === versions.templatesv2[i].id) {\n      templateApp = versions.templatesv2[i];\n    }\n  }\n\n  if (!templateApp) {\n    throw new XDLError(\n      ErrorCode.INVALID_OPTIONS,\n      `No template app with id ${templateId}.`\n    );\n  }\n\n  let starterAppVersion = templateApp.version;\n  let starterAppName = `${templateId}-${starterAppVersion}`;\n  let filename = `${starterAppName}.tar.gz`;\n  let starterAppPath = path.join(_starterAppCacheDirectory(), filename);\n\n  if (await existsAsync(starterAppPath)) {\n    return {\n      starterAppPath,\n      starterAppName,\n    };\n  }\n\n  let url = `https://s3.amazonaws.com/exp-starter-apps/${filename}`;\n  await Api.downloadAsync(\n    url,\n    path.join(_starterAppCacheDirectory(), filename),\n    {},\n    progressFunction,\n    retryFunction\n  );\n  return {\n    starterAppPath,\n    starterAppName,\n  };\n}\n\nexport async function downloadTemplateApp(\n  templateId: string,\n  selectedDir: string,\n  opts: any\n) {\n  // Validate\n  let schema = joi.object().keys({\n    name: joi.string().required(),\n  });\n\n  // Should we validate that name is a valid name here?\n  try {\n    await joi.promise.validate({ name: opts.name }, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n  let name = opts.name;\n  let root = path.join(selectedDir, name);\n\n  Analytics.logEvent('New Project', {\n    selectedDir,\n    name,\n  });\n\n  let fileExists = true;\n  try {\n    // If file doesn't exist it will throw an error.\n    // Don't want to continue unless there is nothing there.\n    fs.statSync(root);\n  } catch (e) {\n    fileExists = false;\n  }\n  // This check is required because without it, the retry button would throw an error because the directory already exists,\n  // even though it is empty.\n  if (fileExists && fs.readdirSync(root).length !== 0) {\n    throw new XDLError(\n      ErrorCode.DIRECTORY_ALREADY_EXISTS,\n      `That directory already exists. Please choose a different parent directory or project name.`\n    );\n  }\n\n  // Download files\n  await mkdirp.promise(root);\n  Logger.notifications.info(\n    { code: NotificationCode.PROGRESS },\n    MessageCode.DOWNLOADING\n  );\n  let { starterAppPath } = await _downloadStarterAppAsync(\n    templateId,\n    opts.progressFunction,\n    opts.retryFunction\n  );\n  return { starterAppPath, name, root };\n}\n\nexport async function extractTemplateApp(\n  starterAppPath: string,\n  name: string,\n  root: string\n) {\n  Logger.notifications.info(\n    { code: NotificationCode.PROGRESS },\n    MessageCode.EXTRACTING\n  );\n  await Extract.extractAsync(starterAppPath, root);\n\n  // Update files\n  Logger.notifications.info(\n    { code: NotificationCode.PROGRESS },\n    MessageCode.CUSTOMIZING\n  );\n\n  let author = await UserSettings.getAsync('email', null);\n  let packageJsonFile = new JsonFile(path.join(root, 'package.json'));\n  let packageJson = await packageJsonFile.readAsync();\n  let data = Object.assign(packageJson, {\n    name,\n    version: '0.0.0',\n    description: 'Hello Expo!',\n    author,\n  });\n\n  await packageJsonFile.writeAsync(data);\n\n  // Update app.json\n  let appJson = await fs.readFile.promise(path.join(root, 'app.json'), 'utf8');\n  let customAppJson = appJson\n    .replace(/\\\"My New Project\\\"/, `\"${data.name}\"`)\n    .replace(/\\\"my-new-project\\\"/, `\"${data.name}\"`);\n  await fs.writeFile.promise(\n    path.join(root, 'app.json'),\n    customAppJson,\n    'utf8'\n  );\n\n  await initGitRepo(root);\n\n  Logger.notifications.info(\n    { code: NotificationCode.PROGRESS },\n    'Starting project...'\n  );\n\n  return root;\n}\n\nasync function initGitRepo(root: string) {\n  if (process.platform === 'darwin' && !Binaries.isXcodeInstalled()) {\n    Logger.global.warn(`Unable to initialize git repo. \\`git\\` not installed.`);\n    return;\n  }\n\n  // let's see if we're in a git tree\n  let insideGit = true;\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    Logger.global.debug(\n      'New project is already inside of a git repo, skipping git init.'\n    );\n  } catch (e) {\n    insideGit = false;\n  }\n\n  if (!insideGit) {\n    try {\n      await spawnAsync('git', ['init'], { cwd: root });\n    } catch (e) {\n      // no-op -- this is just a convenience and we don't care if it fails\n    }\n  }\n}\n\nexport async function saveRecentExpRootAsync(root: string) {\n  root = path.resolve(root);\n\n  // Write the recent Exps JSON file\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n  // Filter out copies of this so we don't get dupes in this list\n  recentExps = recentExps.filter(function(x) {\n    return x !== root;\n  });\n  recentExps.unshift(root);\n  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));\n}\n\nfunction getHomeDir(): string {\n  return (\n    process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || ''\n  );\n}\n\nfunction makePathReadable(pth) {\n  let homedir = getHomeDir();\n  if (pth.substr(0, homedir.length) === homedir) {\n    return `~${pth.substr(homedir.length)}`;\n  } else {\n    return pth;\n  }\n}\n\nexport async function expInfoSafeAsync(root: string) {\n  try {\n    let {\n      exp: { name, description, icon, iconUrl },\n    } = await ProjectUtils.readConfigJsonAsync(root);\n    let pathOrUrl =\n      icon ||\n      iconUrl ||\n      'https://d3lwq5rlu14cro.cloudfront.net/ExponentEmptyManifest_192.png';\n    let resolvedPath = path.resolve(root, pathOrUrl);\n    if (fs.existsSync(resolvedPath)) {\n      icon = `file://${resolvedPath}`;\n    } else {\n      icon = pathOrUrl; // Assume already a URL\n    }\n\n    return {\n      readableRoot: makePathReadable(root),\n      root,\n      name,\n      description,\n      icon,\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\ntype PublishInfo = {\n  args: {\n    username: string,\n    remoteUsername: string,\n    remotePackageName: string,\n    remoteFullPackageName: string,\n    bundleIdentifierIOS: ?string,\n    packageNameAndroid: ?string,\n  },\n};\n\n// TODO: remove / change, no longer publishInfo, this is just used for signing\nexport async function getPublishInfoAsync(root: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(root);\n\n  const name = exp.slug;\n  const version = exp.version;\n\n  const configName = await ProjectUtils.configFilenameAsync(root);\n\n  if (!exp || !exp.sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${configName}`);\n  }\n\n  if (!name) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  let remotePackageName = name;\n  let remoteUsername = username;\n  let remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;\n  let bundleIdentifierIOS = exp.ios ? exp.ios.bundleIdentifier : null;\n  let packageNameAndroid = exp.android ? exp.android.package : null;\n\n  return {\n    args: {\n      username,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      bundleIdentifierIOS,\n      packageNameAndroid, // TODO: this isn't used anywhere\n    },\n  };\n}\n\nexport async function recentValidExpsAsync() {\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n\n  let results = await Promise.all(recentExps.map(expInfoSafeAsync));\n  let filteredResults = results.filter(result => result);\n  return filteredResults;\n}\n\nexport async function sendAsync(recipient: string, url_: string) {\n  let result = await Api.callMethodAsync('send', [recipient, url_]);\n  return result;\n}\n\n// TODO: figure out where these functions should live\nexport async function getProjectRandomnessAsync(projectRoot: string) {\n  let ps = await ProjectSettings.readAsync(projectRoot);\n  let randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nexport async function resetProjectRandomnessAsync(projectRoot: string) {\n  let randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nexport async function clearXDLCacheAsync() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'android-apk-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'starter-app-cache'));\n  Logger.notifications.info(`Cleared cache`);\n}\n"],"sourceRoot":"/xdl/src"}