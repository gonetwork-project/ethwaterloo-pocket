{"version":3,"sources":["detach/IosPodsTools.js"],"names":["async","pathToTemplate","pathToOutput","moreSubstitutions","sdkVersion","let","templatesDirectory","path","dirname","templateString","await","fs","promise","readFile","reactNativePath","REACT_NATIVE_PATH","rnDependencyOptions","expoKitPath","EXPOKIT_PATH","expoKitTag","EXPOKIT_TAG","expoKitDependencyOptions","versionedDependencies","renderVersionedReactNativeDependenciesAsync","versionedPostinstalls","renderVersionedReactNativePostinstallsAsync","podDependencies","renderPodDependenciesAsync","join","isPodfile","substitutions","EXPONENT_CLIENT_DEPS","EXPOKIT_DEPENDENCY","renderExpoKitDependency","PODFILE_UNVERSIONED_RN_DEPENDENCY","renderUnversionedReactNativeDependency","PODFILE_UNVERSIONED_POSTINSTALL","renderUnversionedPostinstall","PODFILE_DETACHED_POSTINSTALL","renderDetachedPostinstall","PODFILE_VERSIONED_RN_DEPENDENCIES","PODFILE_VERSIONED_POSTINSTALLS","PODFILE_TEST_TARGET","renderPodfileTestTarget","result","key","hasOwnProperty","replacement","replace","RegExp","writeFile","renderPodfileAsync","dependencies","indentString","IOS_EXPONENT_CLIENT_VERSION","renderExpoKitPodspecAsync","concatTemplateFilesInDirectoryAsync","directory","templateFilenames","glob","templateStrings","Promise","all","map","filename","push","dependenciesConfigPath","options","readAsync","type","depsStrings","dependency","name","version","attributes","git","tag","branch","subspecs","renderDependencyAttributes","sdkMajorVersion","parseSdkMajorVersion","renderUnversionedReactDependency","renderUnversionedYogaDependency","renderUnversionedThirdPartyDependency","Error","podName","podspecRelativePath","podspec","inhibit_warnings","attributesStrings","Object","keys","value","JSON","stringify","podsRootSub"],"mappings":"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","file":"../../detach/IosPodsTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs';\nimport glob from 'glob';\nimport indentString from 'indent-string';\nimport 'instapromise';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\n\nimport { parseSdkMajorVersion } from './ExponentTools';\n\n/**\n *  @param pathToTemplate path to template Podfile\n *  @param pathToOutput path to render final Podfile\n *  @param moreSubstitutions dictionary of additional substitution keys and values to replace\n *         in the template, such as: TARGET_NAME, REACT_NATIVE_PATH\n */\nasync function renderPodfileAsync(\n  pathToTemplate,\n  pathToOutput,\n  moreSubstitutions,\n  sdkVersion = 'UNVERSIONED'\n) {\n  if (!moreSubstitutions) {\n    moreSubstitutions = {};\n  }\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.promise.readFile(pathToTemplate, 'utf8');\n\n  let reactNativePath = moreSubstitutions.REACT_NATIVE_PATH;\n  let rnDependencyOptions;\n  if (reactNativePath) {\n    rnDependencyOptions = { reactNativePath };\n  } else {\n    rnDependencyOptions = {};\n  }\n\n  const expoKitPath = moreSubstitutions.EXPOKIT_PATH;\n  const expoKitTag = moreSubstitutions.EXPOKIT_TAG;\n  let expoKitDependencyOptions = {};\n  if (expoKitPath) {\n    expoKitDependencyOptions = { expoKitPath };\n  } else if (expoKitTag) {\n    expoKitDependencyOptions = { expoKitTag };\n  }\n\n  let versionedDependencies = await renderVersionedReactNativeDependenciesAsync(\n    templatesDirectory\n  );\n  let versionedPostinstalls = await renderVersionedReactNativePostinstallsAsync(\n    templatesDirectory\n  );\n  let podDependencies = await renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: true }\n  );\n\n  let substitutions = {\n    EXPONENT_CLIENT_DEPS: podDependencies,\n    EXPOKIT_DEPENDENCY: renderExpoKitDependency(expoKitDependencyOptions),\n    PODFILE_UNVERSIONED_RN_DEPENDENCY: renderUnversionedReactNativeDependency(\n      rnDependencyOptions,\n      sdkVersion\n    ),\n    PODFILE_UNVERSIONED_POSTINSTALL: renderUnversionedPostinstall(),\n    PODFILE_DETACHED_POSTINSTALL: renderDetachedPostinstall(sdkVersion),\n    PODFILE_VERSIONED_RN_DEPENDENCIES: versionedDependencies,\n    PODFILE_VERSIONED_POSTINSTALLS: versionedPostinstalls,\n    PODFILE_TEST_TARGET: renderPodfileTestTarget(reactNativePath),\n    ...moreSubstitutions,\n  };\n\n  let result = templateString;\n  for (let key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      let replacement = substitutions[key];\n      result = result.replace(\n        new RegExp(`\\\\\\$\\\\\\{${key}\\\\\\}`, 'g'),\n        replacement\n      );\n    }\n  }\n\n  await fs.promise.writeFile(pathToOutput, result);\n}\n\nasync function renderExpoKitPodspecAsync(\n  pathToTemplate,\n  pathToOutput,\n  moreSubstitutions\n) {\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.promise.readFile(pathToTemplate, 'utf8');\n  let dependencies = await renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: false }\n  );\n  let result = templateString.replace(\n    /\\$\\{IOS_EXPOKIT_DEPS\\}/g,\n    indentString(dependencies, 2)\n  );\n  if (moreSubstitutions && moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION) {\n    result = result.replace(\n      /\\$\\{IOS_EXPONENT_CLIENT_VERSION\\}/g,\n      moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION\n    );\n  }\n\n  await fs.promise.writeFile(pathToOutput, result);\n}\n\nfunction renderExpoKitDependency(options) {\n  let attributes;\n  if (options.expoKitPath) {\n    attributes = {\n      path: options.expoKitPath,\n    };\n  } else if (options.expoKitTag) {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      tag: options.expoKitTag,\n    };\n  } else {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      branch: 'master',\n    };\n  }\n  attributes.subspecs = ['Core', 'CPP'];\n\n  let dependency = `pod 'ExpoKit',\n${indentString(renderDependencyAttributes(attributes), 2)}`;\n\n  return indentString(dependency, 2);\n}\n\n/**\n * @param sdkVersion if specified, indicates which sdkVersion this project uses\n *  as 'UNVERSIONED', e.g. if we are detaching a sdk15 project, we render\n *  an unversioned dependency pointing at RN#sdk-15.\n */\nfunction renderUnversionedReactNativeDependency(options, sdkVersion) {\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (sdkMajorVersion === 14) {\n    return indentString(\n      `\n${renderUnversionedReactDependency(options)}\n`,\n      2\n    );\n  } else if (sdkMajorVersion < 21) {\n    return indentString(\n      `\n${renderUnversionedReactDependency(options, sdkVersion)}\n${renderUnversionedYogaDependency(options)}\n`,\n      2\n    );\n  } else {\n    return indentString(\n      `\n${renderUnversionedReactDependency(options, sdkVersion)}\n${renderUnversionedYogaDependency(options)}\n${renderUnversionedThirdPartyDependency(\n        'DoubleConversion',\n        path.join('third-party-podspecs', 'DoubleConversion.podspec'),\n        options\n      )}\n${renderUnversionedThirdPartyDependency(\n        'Folly',\n        path.join('third-party-podspecs', 'Folly.podspec'),\n        options\n      )}\n${renderUnversionedThirdPartyDependency(\n        'GLog',\n        path.join('third-party-podspecs', 'GLog.podspec'),\n        options\n      )}\n`,\n      2\n    );\n  }\n}\n\nfunction renderUnversionedReactDependency(options, sdkVersion) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: options.reactNativePath,\n    };\n  } else {\n    throw new Error(`Unsupported options for RN dependency: ${options}`);\n  }\n\n  attributes.subspecs = [\n    'Core',\n    'ART',\n    'RCTActionSheet',\n    'RCTAnimation',\n    'RCTCameraRoll',\n    'RCTGeolocation',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTText',\n    'RCTVibration',\n    'RCTWebSocket',\n  ];\n\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (!(sdkMajorVersion < 16)) {\n    attributes.subspecs.push('DevSupport');\n  }\n  if (!(sdkMajorVersion < 21)) {\n    attributes.subspecs.push('CxxBridge');\n  } else if (!(sdkMajorVersion < 18)) {\n    attributes.subspecs.push('BatchedBridge');\n  }\n\n  return `pod 'React',\n${indentString(renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction renderUnversionedYogaDependency(options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: path.join(options.reactNativePath, 'ReactCommon', 'yoga'),\n    };\n  } else {\n    throw new Error(`Unsupported options for Yoga dependency: ${options}`);\n  }\n  return `pod 'Yoga',\n${indentString(renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction renderUnversionedThirdPartyDependency(\n  podName,\n  podspecRelativePath,\n  options\n) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      podspec: path.join(options.reactNativePath, podspecRelativePath),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(\n      `Unsupported options for ${podName} dependency: ${options}`\n    );\n  }\n  return `pod '${podName}',\n${indentString(renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction renderDependencyAttributes(attributes) {\n  let attributesStrings = [];\n  for (let key of Object.keys(attributes)) {\n    let value = JSON.stringify(attributes[key], null, 2);\n    attributesStrings.push(`:${key} => ${value}`);\n  }\n  return attributesStrings.join(',\\n');\n}\n\nasync function renderVersionedReactNativeDependenciesAsync(templatesDirectory) {\n  // TODO: write these files with versioning script\n  return concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'dependencies')\n  );\n}\n\nasync function renderVersionedReactNativePostinstallsAsync(templatesDirectory) {\n  // TODO: write these files with versioning script\n  return concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'postinstalls')\n  );\n}\n\nasync function concatTemplateFilesInDirectoryAsync(directory) {\n  let templateFilenames = await glob.promise(path.join(directory, '*.rb'));\n  let templateStrings = [];\n  await Promise.all(\n    templateFilenames.map(async filename => {\n      let templateString = await fs.promise.readFile(filename, 'utf8');\n      if (templateString) {\n        templateStrings.push(templateString);\n      }\n    })\n  );\n  return templateStrings.join('\\n');\n}\n\nfunction renderDetachedPostinstall(sdkVersion) {\n  let podsRootSub = '${PODS_ROOT}';\n  return `\n    if target.pod_name == 'ExpoKit'\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED=1'\n        # needed for GoogleMaps 2.x\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= []\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Base/Frameworks'\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Maps/Frameworks'\n      end\n    end\n`;\n}\n\nfunction renderUnversionedPostinstall() {\n  return `\n    # Build React Native with RCT_DEV enabled\n    next unless target.pod_name == 'React'\n    target.native_target.build_configurations.each do |config|\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_DEV=1'\n    end\n`;\n}\n\nfunction renderPodfileTestTarget(reactNativePath) {\n  return `\n  target 'ExponentIntegrationTests' do\n    inherit! :search_paths\n  end\n`;\n}\n\nasync function renderPodDependenciesAsync(dependenciesConfigPath, options) {\n  let dependencies = await new JsonFile(dependenciesConfigPath).readAsync();\n  let type = options.isPodfile ? 'pod' : 'ss.dependency';\n  let depsStrings = dependencies.map(\n    dependency => `  ${type} '${dependency.name}', '${dependency.version}'`\n  );\n  return depsStrings.join('\\n');\n}\n\nexport { renderExpoKitPodspecAsync, renderPodfileAsync };\n"],"sourceRoot":"/xdl/src"}