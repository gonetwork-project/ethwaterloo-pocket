{"version":3,"sources":["detach/ExponentTools.js"],"names":["async","url","headers","let","requestOptions","replace","response","await","request","promise","responseBody","body","console","log","manifest","JSON","parse","e","Error","getManifestAsync","args","length","spawnAsyncQuiet","stdio","cwd","process","spawnAsyncThrowError","error","message","spawnAsync","filename","transform","fileString","fs","readFile","newFileString","writeFile","transformFileContentsAsync","plistPath","plistName","emptyConfig","tmpConfigFile","path","join","stringify","plistFilename","getNormalizedPlistFilename","configPlistName","createBlankIOSPropertyListAsync","configFilename","configContents","config","modifyIOSPropertyListAsync","restoreOriginal","cleanIOSPropertyListBackupAsync","dirname","basename","platform","warn","childProcess","dimensions","components","stdout","split","map","c","parseInt","filter","n","isNaN","_","getImageDimensionsAsync","projectRoot","srcRoot","splash","ios","android","splashXibFilename","splashOutputFilename","parser","serializer","dom","parseFromString","setBackgroundColor","setBackgroundImageResizeMode","serializeToString","setBackgroundImage","configureIOSLaunchAssetsAsync","tabletImage","phoneImage","imageUrl","tabletImageUrl","outputs","push","forEach","output","saveImageToPathAsync","destinationIconPath","defaultIconFilename","iconUrl","saveUrlToPathAsync","icon","iconSizes","iconSize","iconResolutions","iconResolution","iconQualifier","getAppleIconQualifier","iconKey","rawIconFilename","usesDefault","hasOwnProperty","iconFilename","iconSizePx","dims","configureIOSIconsAsync","ASPECT_FILL","ASPECT_FIT","backgroundImageViewID","backgroundViewID","parseSdkMajorVersion","expSdkVersion","sdkMajorVersion","versionComponents","number","Promise","resolve","reject","stream","createWriteStream","on","getFilesizeInBytes","pipe","pathOrURL","outPath","localPath","existsSync","createReadStream","stats","statSync","fileSizeInBytes","indexOf","backgroundColorFromHexString","hexColor","result","exec","r","g","b","backgroundViewMode","mode","resizeMode","backgroundImageViewNode","getElementById","setAttribute","backgroundColorString","backgroundColor","loading","backgroundViewNode","backgroundViewColorNodes","getElementsByTagName","backgroundColorNode","i","node","parentNode","getAttribute"],"mappings":"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","file":"../../detach/ExponentTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs';\nimport 'instapromise';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsyncQuiet from '@expo/spawn-async';\nimport { DOMParser, XMLSerializer } from 'xmldom';\n\nconst ASPECT_FILL = 'scaleAspectFill';\nconst ASPECT_FIT = 'scaleAspectFit';\n\nconst backgroundImageViewID = 'Bsh-cT-K4l';\nconst backgroundViewID = 'OfY-5Y-tS4';\n\nfunction parseSdkMajorVersion(expSdkVersion) {\n  let sdkMajorVersion = 0;\n  try {\n    let versionComponents = expSdkVersion\n      .split('.')\n      .map(number => parseInt(number, 10));\n    sdkMajorVersion = versionComponents[0];\n  } catch (_) {}\n  return sdkMajorVersion;\n}\n\nfunction saveUrlToPathAsync(url, path) {\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(path);\n    stream.on('close', () => {\n      if (getFilesizeInBytes(path) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    request(url).pipe(stream);\n  });\n}\n\nfunction saveImageToPathAsync(projectRoot, pathOrURL, outPath) {\n  const localPath = path.resolve(projectRoot, pathOrURL);\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(outPath);\n    stream.on('close', () => {\n      if (getFilesizeInBytes(outPath) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    if (fs.existsSync(localPath)) {\n      fs.createReadStream(localPath).pipe(stream);\n    } else {\n      request(pathOrURL).pipe(stream);\n    }\n  });\n}\n\nfunction getFilesizeInBytes(path) {\n  let stats = fs.statSync(path);\n  let fileSizeInBytes = stats['size'];\n  return fileSizeInBytes;\n}\n\nasync function getManifestAsync(url, headers) {\n  let requestOptions = {\n    url: url.replace('exp://', 'http://') + '/index.exp',\n    headers,\n  };\n\n  let response = await request.promise(requestOptions);\n  let responseBody = response.body;\n  console.log('Using manifest:', responseBody);\n  let manifest;\n  try {\n    manifest = JSON.parse(responseBody);\n  } catch (e) {\n    throw new Error(`Unable to parse manifest: ${e}`);\n  }\n\n  return manifest;\n}\n\nasync function spawnAsyncThrowError(...args) {\n  if (args.length === 2) {\n    return spawnAsyncQuiet(args[0], args[1], {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n  } else {\n    return spawnAsyncQuiet(...args);\n  }\n}\n\nasync function spawnAsync(...args) {\n  try {\n    return await spawnAsyncThrowError(...args);\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nasync function transformFileContentsAsync(filename, transform) {\n  let fileString = await fs.promise.readFile(filename, 'utf8');\n  let newFileString = transform(fileString);\n  if (newFileString !== null) {\n    await fs.promise.writeFile(filename, newFileString);\n  }\n  return;\n}\n\nfunction getNormalizedPlistFilename(plistName) {\n  let plistFilename;\n  if (plistName.indexOf('.') !== -1) {\n    plistFilename = plistName;\n  } else {\n    plistFilename = `${plistName}.plist`;\n  }\n  return plistFilename;\n}\n\nasync function createBlankIOSPropertyListAsync(plistPath, plistName) {\n  // write empty json file\n  const emptyConfig = {};\n  const tmpConfigFile = path.join(plistPath, `${plistName}.json`);\n  await fs.promise.writeFile(tmpConfigFile, JSON.stringify(emptyConfig));\n\n  // convert to plist\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'xml1',\n    tmpConfigFile,\n    '-o',\n    configPlistName,\n  ]);\n\n  // remove tmp json file\n  await spawnAsyncThrowError('/bin/rm', [tmpConfigFile]);\n  return;\n}\n\n/**\n *  @param plistName base filename of property list. if no extension, assumes .plist\n */\nasync function modifyIOSPropertyListAsync(plistPath, plistName, transform) {\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  // grab original plist as json object\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'json',\n    configPlistName,\n    '-o',\n    configFilename,\n  ]);\n  let configContents = await fs.promise.readFile(configFilename, 'utf8');\n  let config;\n\n  try {\n    config = JSON.parse(configContents);\n  } catch (e) {\n    console.log(`Error parsing ${configFilename}`, e);\n    console.log('The erroneous file contents was:', configContents);\n    config = {};\n  }\n\n  // apply transformation\n  config = transform(config);\n\n  // back up old plist and swap in modified one\n  await spawnAsyncThrowError('/bin/cp', [\n    configPlistName,\n    `${configPlistName}.bak`,\n  ]);\n  await fs.promise.writeFile(configFilename, JSON.stringify(config));\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'xml1',\n    configFilename,\n    '-o',\n    configPlistName,\n  ]);\n  return config;\n}\n\nasync function cleanIOSPropertyListBackupAsync(\n  plistPath,\n  plistName,\n  restoreOriginal = true\n) {\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  if (restoreOriginal) {\n    await spawnAsyncThrowError('/bin/cp', [\n      `${configPlistName}.bak`,\n      configPlistName,\n    ]);\n  }\n\n  await spawnAsyncThrowError('/bin/rm', [`${configPlistName}.bak`]);\n  await spawnAsyncThrowError('/bin/rm', [configFilename]);\n  return;\n}\n\nfunction getAppleIconQualifier(iconSize, iconResolution) {\n  let iconQualifier;\n  if (iconResolution !== 1) {\n    // e.g. \"29x29@3x\"\n    iconQualifier = `${iconSize}x${iconSize}@${iconResolution}x`;\n  } else {\n    iconQualifier = `${iconSize}x${iconSize}`;\n  }\n  if (iconSize === 76 || iconSize === 83.5) {\n    // ipad sizes require ~ipad at the end\n    iconQualifier = `${iconQualifier}~ipad`;\n  }\n  return iconQualifier;\n}\n\n/**\n *  @return array [ width, height ] or nil if that fails for some reason.\n */\nasync function getImageDimensionsAsync(dirname, basename) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let childProcess = await spawnAsyncThrowError(\n    'sips',\n    ['-g', 'pixelWidth', '-g', 'pixelHeight', basename],\n    {\n      cwd: dirname,\n    }\n  );\n  let dimensions;\n  try {\n    // stdout looks something like 'pixelWidth: 1200\\n pixelHeight: 800'\n    const components = childProcess.stdout.split(/(\\s+)/);\n    dimensions = components.map(c => parseInt(c, 10)).filter(n => !isNaN(n));\n  } catch (_) {}\n  return dimensions;\n}\n\nfunction backgroundColorFromHexString(hexColor) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexColor);\n  if (result.length < 4) {\n    // Default to white if we can't parse the color. We should have 3 matches.\n    console.warn('Unable to parse color: ', hexColor, ' result:', result);\n    return { r: 1, g: 1, b: 1 };\n  }\n\n  var r = parseInt(result[1], 16) / 255;\n  var g = parseInt(result[2], 16) / 255;\n  var b = parseInt(result[3], 16) / 255;\n  return { r, g, b };\n}\n\nasync function configureIOSLaunchAssetsAsync(manifest, projectRoot, srcRoot) {\n  if (\n    !(\n      manifest.splash ||\n      (manifest.ios && manifest.ios.splash) ||\n      (manifest.android && manifest.android.splash)\n    )\n  ) {\n    // Don't do loading xib customizations if `splash` keys don't exist\n    return;\n  }\n\n  console.log('Configuring iOS Launch Screen');\n  let splashXibFilename = path.join(\n    srcRoot,\n    'Exponent',\n    'Base.lproj',\n    'LaunchScreenShell.xib'\n  );\n  let splashOutputFilename = path.join(\n    projectRoot,\n    'Base.lproj',\n    'LaunchScreenShell.nib'\n  );\n\n  await transformFileContentsAsync(splashXibFilename, fileString => {\n    var parser = new DOMParser();\n    var serializer = new XMLSerializer();\n    var dom = parser.parseFromString(fileString);\n\n    setBackgroundColor(manifest, dom);\n    setBackgroundImageResizeMode(manifest, dom);\n\n    var fileString = serializer.serializeToString(dom);\n    return fileString;\n  });\n\n  await setBackgroundImage(manifest, projectRoot);\n\n  await spawnAsyncThrowError('ibtool', [\n    '--compile',\n    splashOutputFilename,\n    splashXibFilename,\n  ]);\n\n  console.log('DONE Configuring iOS Launch Screen');\n}\n\nasync function setBackgroundImage(manifest, projectRoot) {\n  let tabletImage;\n  let phoneImage;\n\n  if (manifest.ios && manifest.ios.splash && manifest.ios.splash.imageUrl) {\n    phoneImage = manifest.ios.splash.imageUrl;\n\n    if (manifest.ios.splash.tabletImageUrl) {\n      tabletImage = manifest.ios.splash.tabletImageUrl;\n    }\n  } else if (manifest.splash && manifest.splash.imageUrl) {\n    phoneImage = manifest.splash.imageUrl;\n  }\n\n  if (!phoneImage) {\n    return;\n  }\n\n  var outputs = [];\n  if (!tabletImage) {\n    outputs.push({\n      url: phoneImage,\n      path: path.join(projectRoot, 'launch_background_image.png'),\n    });\n  } else {\n    outputs.push({\n      url: phoneImage,\n      path: path.join(projectRoot, 'launch_background_image~iphone.png'),\n    });\n    outputs.push({\n      url: tabletImage,\n      path: path.join(projectRoot, 'launch_background_image.png'),\n    });\n  }\n\n  outputs.forEach(async output => {\n    let { url, path } = output;\n    console.log(url, path, output);\n    await saveImageToPathAsync(projectRoot, url, path);\n  });\n}\n\nfunction setBackgroundImageResizeMode(manifest, dom) {\n  let backgroundViewMode = (() => {\n    let mode;\n    if (!manifest) {\n      return ASPECT_FIT;\n    }\n\n    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.resizeMode) {\n      mode = manifest.ios.splash.resizeMode;\n    } else if (manifest.splash.resizeMode) {\n      mode = manifest.splash.resizeMode;\n    }\n\n    return mode === 'cover' ? ASPECT_FILL : ASPECT_FIT;\n  })();\n\n  var backgroundImageViewNode = dom.getElementById(backgroundImageViewID);\n  if (backgroundImageViewNode) {\n    backgroundImageViewNode.setAttribute('contentMode', backgroundViewMode);\n  }\n}\n\nfunction setBackgroundColor(manifest, dom) {\n  var backgroundColorString;\n  if (\n    manifest.ios &&\n    manifest.ios.splash &&\n    manifest.ios.splash.backgroundColor\n  ) {\n    backgroundColorString = manifest.ios.splash.backgroundColor;\n  } else if (manifest.splash && manifest.splash.backgroundColor) {\n    backgroundColorString = manifest.splash.backgroundColor;\n  }\n\n  // Fallback to old version\n  if (!backgroundColorString) {\n    backgroundColorString = manifest.loading.backgroundColor;\n  }\n\n  // Default to white\n  if (!backgroundColorString) {\n    backgroundColorString = '#FFFFFF';\n  }\n\n  const { r, g, b } = backgroundColorFromHexString(backgroundColorString);\n  var backgroundViewNode = dom.getElementById(backgroundViewID);\n  var backgroundViewColorNodes = backgroundViewNode.getElementsByTagName(\n    'color'\n  );\n  var backgroundColorNode;\n  for (var i = 0; i < backgroundViewColorNodes.length; i++) {\n    var node = backgroundViewColorNodes[i];\n    if (node.parentNode.getAttribute('id') !== backgroundViewID) {\n      continue;\n    }\n\n    if (node.getAttribute('key') === 'backgroundColor') {\n      backgroundColorNode = node;\n      break;\n    }\n  }\n\n  if (backgroundColorNode) {\n    backgroundColorNode.setAttribute('red', r);\n    backgroundColorNode.setAttribute('green', g);\n    backgroundColorNode.setAttribute('blue', b);\n  }\n}\n\n/**\n * Based on keys in the given manifest,\n * ensure that the proper iOS icon images exist -- assuming Info.plist already\n * points at them under CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles.\n *\n * This only works on MacOS (as far as I know) because it uses the sips utility.\n */\nasync function configureIOSIconsAsync(\n  manifest,\n  destinationIconPath,\n  projectRoot\n) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let defaultIconFilename;\n  if (manifest.ios && manifest.ios.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.ios.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (manifest.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (projectRoot && manifest.icon) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveImageToPathAsync(\n      projectRoot,\n      manifest.icon,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  }\n\n  let iconSizes = [20, 29, 40, 60, 76, 83.5, 1024];\n  iconSizes.forEach(iconSize => {\n    let iconResolutions;\n    if (iconSize === 76) {\n      // iPad has 1x and 2x icons for this size only\n      iconResolutions = [1, 2];\n    } else if (iconSize == 1024) {\n      // marketing icon is weird\n      iconResolutions = [1];\n    } else {\n      iconResolutions = [2, 3];\n    }\n    iconResolutions.forEach(async iconResolution => {\n      let iconQualifier = getAppleIconQualifier(iconSize, iconResolution);\n      // TODO(nikki): Support local paths for these icons\n      let iconKey = `iconUrl${iconQualifier}`;\n      let rawIconFilename;\n      let usesDefault = false;\n      if (manifest.ios && manifest.ios.hasOwnProperty(iconKey)) {\n        // manifest specifies an image just for this size/resolution, use that\n        rawIconFilename = `exp-icon${iconQualifier}.png`;\n        await saveUrlToPathAsync(\n          manifest.ios[iconKey],\n          `${destinationIconPath}/${rawIconFilename}`\n        );\n      } else {\n        // use default manifest.iconUrl\n        usesDefault = true;\n        if (defaultIconFilename) {\n          rawIconFilename = defaultIconFilename;\n        } else {\n          console.warn(\n            `Manifest does not specify ios.${iconKey} nor a default iconUrl. Bundle will use the Expo logo.`\n          );\n          return;\n        }\n      }\n\n      let iconFilename = `AppIcon${iconQualifier}.png`;\n      let iconSizePx = iconSize * iconResolution;\n      await spawnAsyncThrowError('/bin/cp', [rawIconFilename, iconFilename], {\n        stdio: 'inherit',\n        cwd: destinationIconPath,\n      });\n      await spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n        stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n        cwd: destinationIconPath,\n      });\n\n      // reject non-square icons (because Apple will if we don't)\n      const dims = await getImageDimensionsAsync(\n        destinationIconPath,\n        iconFilename\n      );\n      if (!dims || dims.length < 2 || dims[0] !== dims[1]) {\n        throw new Error(\n          `iOS icons must be square, the dimensions of ${iconFilename} are ${dims}`\n        );\n      }\n\n      if (!usesDefault) {\n        // non-default icon used, clean up the downloaded version\n        await spawnAsyncThrowError('/bin/rm', [\n          path.join(destinationIconPath, rawIconFilename),\n        ]);\n      }\n    });\n  });\n\n  // clean up default icon\n  if (defaultIconFilename) {\n    await spawnAsyncThrowError('/bin/rm', [\n      path.join(destinationIconPath, defaultIconFilename),\n    ]);\n  }\n  return;\n}\n\nexport {\n  parseSdkMajorVersion,\n  saveUrlToPathAsync,\n  saveImageToPathAsync,\n  getManifestAsync,\n  getImageDimensionsAsync,\n  spawnAsyncThrowError,\n  spawnAsync,\n  transformFileContentsAsync,\n  modifyIOSPropertyListAsync,\n  cleanIOSPropertyListBackupAsync,\n  configureIOSIconsAsync,\n  configureIOSLaunchAssetsAsync,\n  createBlankIOSPropertyListAsync,\n};\n"],"sourceRoot":"/xdl/src"}